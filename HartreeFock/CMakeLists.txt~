# CMake project file for HartreeFock

cmake_minimum_required (VERSION 2.6)
project (HartreeFock C CXX Fortran)
enable_language (Fortran)

# ADDED TO LINK WITH "ar crv" instead of "ar cq", WHICH FAILS TO LINK EXECUTABLES.
# SEEMS TO BE NOT NECESSARY.
#SET(CMAKE_C_ARCHIVE_CREATE "echo \"Sub directory\"; <CMAKE_AR> crv <TARGET> <LINK_FLAGS> <OBJECTS>")
#SET(CMAKE_CXX_ARCHIVE_CREATE "echo \"Sub directory\"; <CMAKE_AR> crv <TARGET> <LINK_FLAGS> <OBJECTS>")
#SET(CMAKE_Fortran_ARCHIVE_CREATE "echo \"Sub directory\"; <CMAKE_AR> crv <TARGET> <LINK_FLAGS> <OBJECTS>")

####################################################################
#################### MAKEVARS.FEATURES CONTENT: ####################
####################################################################

set(LIBINT_SUPPORTS_ONEBODY "yes")
set(LIBINT_ONEBODY_DERIV 2)
set(LIBINT_SUPPORTS_ERI "yes")
set(LIBINT_ERI_DERIV 2)
set(LIBINT_CONTRACTED_INTS "yes")
set(LIBINT_SHELL_SET 1)

####################################################################
################## END MAKEVARS.FEATURES CONTENT: ##################
####################################################################

####################################################################
######################## MAKEVARS CONTENT: #########################
####################################################################

# Emacs should use -*- Makefile -*- mode.

# this is usually overridden
#TARGET_TO_MAKE = $(shell basename `pwd`)
#set(TARGET_TO_MAKE ${CMAKE_CURRENT_BINARY_DIR})
get_filename_component (default_prefix "." ABSOLUTE)
set(TARGET_TO_MAKE ${default_prefix})

#ifndef SRCDIR
#  SRCDIR = .
#endif
#SRCTOPDIR = $(SRCDIR)/$(TOPDIR)
set(SRCDIR ${CMAKE_CURRENT_SOURCE_DIR})
set(SRCTOPDIR "${CMAKE_CURRENT_SOURCE_DIR}/..")


#host = x86_64-pc-linux-gnu
#host_cpu = x86_64
#host_vendor = pc
#host_os = linux-gnu
set(host "x86_64-pc-linux-gnu")
set(host_cpu "x86_64")
set(host_vendor "pc")
set(host_os "linux-gnu")

#target = x86_64-pc-linux-gnu
#target_cpu = x86_64
#target_vendor = pc
#target_os = linux-gnu
set(target "x86_64-pc-linux-gnu")
set(target_cpu "x86_64")
set(target_vendor "pc")
set(target_os "linux-gnu")

#LIBINT_VERSION = 2.3.0-beta.3
#BUILDID = beta.3
set(LIBINT_VERSION "2.3.0-beta.3")
set(BUILDID "beta.3")

# The object code suffix
#OBJSUF = lo
set(OBJSUF "lo")

# The library suffix
#LIBSUF = la
set(OBJSUF "la")

# The suffix generated by the -M compiler option
#CXXDEPENDSUF = none
#CXXDEPENDFLAGS = -M
set(CXXDEPENDSUF "none")
set(CXXDEPENDFLAGS "-M")

#CXX = icpc
#CXXCOMP = icpc
#CXXGEN = icpc
#CXX_COMPATIBLE_WITH_CXXGEN = yes
#CXXGEN_SUPPORTS_CPP11 = yes
set(CXX "icpc")
set(CXXCOMP "icpc")
set(CXXGEN "icpc")
set(CXX_COMPATIBLE_WITH_CXXGEN "yes")
set(CXX_SUPPORTS_CPP11 "yes")

#CXXDEPEND = icpc
#AR = ar
#ARFLAGS = r
#LD = /usr/bin/ld -m elf_x86_64
#LDFLAGS = 
set(CXXDEPEND "icpc")
set(AR "ar")
set(ARFLAGS "r")
set(LD "/usr/bin/ld -m elf_x86_64")
set(LDFLAGS " ") 

#INSTALL = /usr/bin/install -c
#INSTALLDIROPT = -d -m 0755
#INSTALLLIBOPT = -m 0644
#INSTALLBINOPT = -m 0755
#INSTALLSCRIPTOPT = -m 0755
set(INSTALL "/usr/bin/install -c")
set(INSTALLDIROPT "-d -m 0755")
set(INSTALLLIBOPT "-m 0644")
set(INSTALLBINOPT "-m 0755")
set(INSTALLSCRIPTOPT "-m 0755")


#prefix=/home/carlos/Python-Projects/DFT-CODES-PYTHON/libint-2.2-spher-shared-intel-derivs/libint-build
#exec_prefix=${prefix}
#bindir=${exec_prefix}/bin
#libdir=${exec_prefix}/lib
#includedir=${prefix}/include
set(prefix "/home/carlos/Python-Projects/DFT-CODES-PYTHON/libint-2.2-spher-shared-intel-derivs/libint-build")
set(exec_prefix "${prefix}")
set(bindir "${exec_prefix}/bin")
set(libdir "${exec_prefix}/lib")
set(includedir "${exec_prefix}/include")

#RANLIB = ranlib
#COMPRESS = gzip
#UNCOMPRESS = gzip -d
#PYTHON = python
set(RANLIB "ranlib")
set(COMPRESS "gzip")
set(UNCOMPRESS "gzip -d")
set(PYTHON "python")

# first check for generated include files in the machine dependent directories
# and then for include files in the src directory
#INCLUDE = -I$(TOPDIR)/src/bin -I$(TOPDIR)/include -I$(SRCTOPDIR)/include \
#          -I$(SRCTOPDIR)/src/bin -fPIC -std=c++11 -I/usr/local/include/eigen3
#DEFINES = -DHAVE_CONFIG_H 
set(INCLUDE "-I$(TOPDIR)/src/bin -I$(TOPDIR)/include -I$(SRCTOPDIR)/include -I$(SRCTOPDIR)/src/bin -fPIC -std=c++11 -I/usr/local/include/eigen3")
set(DEFINES "-DHAVE_CONFIG_H")

#CPPFLAGS = $(DEFINES) $(INCLUDE)
#CXXFLAGS = -fPIC -std=c++11 -I/usr/local/include/eigen3  
#CXXGENFLAGS = -fPIC -std=c++11 -I/usr/local/include/eigen3 -O3 
set(CPPFLAGS "${DEFINES} ${INCLUDE}")
set(CXXFLAGS "-fPIC -std=c++11 -I/usr/local/include/eigen3") 
set(CXXGENFLAGS "-fPIC -std=c++11 -I/usr/local/include/eigen3 -O3")

#SYSLIBS = -lm -lmpfr -lgmpxx -lgmp  
#TARGET_HEADERS = $(HEADERS:%=$(top_objdir)/include/libint/%)
#LIBINT_HAS_EIGEN = yes
set(SYSLIBS "-lm -lmpfr -lgmpxx -lgmp")
set(TARGET_HEADERS "/home/carlos/Python-Projects/DFT-CODES-PYTHON/libint-2.2-spher-shared-intel-derivs/libint-build/include/libint2/*.h*")
set(LIBINT_HAS_EIGEN "yes")

####################################################################
###################### END MAKEVARS CONTENT: #######################
####################################################################


####################################################################
####################### COMPILATION CHAIN: #########################
####################################################################
#icpc -fPIC -std=c++11 -I/usr/local/include/eigen3 -O3  -DHAVE_CONFIG_H  -I../../src/bin -I../../include -I/home/carlos/Python-Projects/DFT-CODES-PYTHON/libint-2.2-spher-shared-intel-derivs/libint-master/tests/hartree-fock/../../include -I/home/carlos/Python-Projects/DFT-CODES-PYTHON/libint-2.2-spher-shared-intel-derivs/libint-master/tests/hartree-fock/../../src/bin -fPIC -std=c++11 -I/usr/local/include/eigen3 -I../../include -I../../include/libint2 -I/home/carlos/Python-Projects/DFT-CODES-PYTHON/libint-2.2-spher-shared-intel-derivs/libint-master/tests/hartree-fock/../../src/lib/libint -DSRCDATADIR=\"/home/carlos/Python-Projects/DFT-CODES-PYTHON/libint-2.2-spher-shared-intel-derivs/libint-master/tests/hartree-fock/../../lib/basis\"  -c -o hartree-fock++.o /home/carlos/Python-Projects/DFT-CODES-PYTHON/libint-2.2-spher-shared-intel-derivs/libint-master/tests/hartree-fock/hartree-fock++.cc

#icpc -o hartree-fock++  hartree-fock++.o /home/carlos/Python-Projects/DFT-CODES-PYTHON/libint-2.2-spher-shared-intel-derivs/libint-build/src/bin/libint/libINT.a /home/carlos/Python-Projects/DFT-CODES-PYTHON/libint-2.2-spher-shared-intel-derivs/libint-build/lib/libint2.so -lm -lmpfr -lgmpxx -lgmp   -lpthread
####################################################################
##################### END COMPILATION CHAIN: #######################
####################################################################

#FORTLIB  = -L$(HFDIR)/../lib -lMatrixMultiplyMod
#FORTSTATICLIB  = $(HFDIR)/../lib/libMatrixMultiplyMod.a

#COMPILER_LIB = $(LIBINTBUILDDIR)/src/bin/libint/libINT.a
##COMPUTE_LIB = -lint2
##COMPUTE_LIB = '-L$(LIBINTBUILDDIR)/lib -lint2'
#COMPUTE_LIB = $(LIBINTBUILDDIR)/lib/libint2.so
#LINKTOCOMPUTE_LIB = '-L$(LIBINTBUILDDIR)/lib/libint2.so -lint2'
#vpath %.a $(LIBINTBUILDDIR)/lib:$(LIBINTBUILDDIR)/lib/.libs




# make sure that the default is a RELEASE
if (NOT CMAKE_BUILD_TYPE)
  set (CMAKE_BUILD_TYPE RELEASE CACHE STRING
      "Choose the type of build, options are: None Debug Release."
      FORCE)
endif (NOT CMAKE_BUILD_TYPE)

# default installation
get_filename_component (default_prefix ".." ABSOLUTE)
set (CMAKE_INSTALL_PREFIX ${default_prefix} CACHE STRING
      "Choose the installation directory; by default it installs in the HartreeFock directory."
      FORCE)

# ADDED TO LINK WITH "ar crv" instead of "ar cq", WHICH FAILS TO LINK EXECUTABLES.
# SEEMS TO BE NOT NECESSARY.
#SET(CMAKE_C_ARCHIVE_CREATE "echo \"Sub directory\"; <CMAKE_AR> crv <TARGET> <LINK_FLAGS> <OBJECTS>")
#SET(CMAKE_CXX_ARCHIVE_CREATE "echo \"Sub directory\"; <CMAKE_AR> crv <TARGET> <LINK_FLAGS> <OBJECTS>")
#SET(CMAKE_Fortran_ARCHIVE_CREATE "echo \"Sub directory\"; <CMAKE_AR> crv <TARGET> <LINK_FLAGS> <OBJECTS>")

set(INCLUDE "${default_prefix}/include")
set(NEGFYLIBDIR "${LIBRARY_BINARY_DIR}/lib")



set(LIBINTROOT "/home/carlos/Python-Projects/DFT-CODES-PYTHON/libint-2.2-spher-shared-intel-derivs")
set(LIBINTBUILDDIR "${LIBINTROOT}/libint-build")
set(LIBINTMASTERDIR "${LIBINTROOT}/libint-master")

set(INCLUDE "${default_prefix}/include")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -i8 -r8 -I${MKLROOT}/include/intel64/lp64 -I${MKLROOT}/include -I${INCLUDE}")

# FFLAGS depend on the compiler
get_filename_component (Fortran_COMPILER_NAME ${CMAKE_Fortran_COMPILER} NAME)

if (Fortran_COMPILER_NAME MATCHES "gfortran.*")
  # gfortran
  set (CMAKE_Fortran_FLAGS_RELEASE "-funroll-all-loops -fno-f2c -O3 -module=${MODINCLUDE}")
  set (CMAKE_Fortran_FLAGS_DEBUG   "-fno-f2c -O0 -g -module=${MODINCLUDE}")
elseif (Fortran_COMPILER_NAME MATCHES "ifort.*")
  # ifort (untested)
  set (CMAKE_Fortran_FLAGS_RELEASE "-i8 -r8 -I${MKLROOT}/include/intel64/lp64 -I${MKLROOT}/include -I${MODINCLUDE} -module=${MODINCLUDE} -O3")
  set (CMAKE_Fortran_FLAGS_DEBUG   "-i8 -r8 -I${MKLROOT}/include/intel64/lp64 -I${MKLROOT}/include -I${MODINCLUDE} -module=${MODINCLUDE} -O0 -g")
elseif (Fortran_COMPILER_NAME MATCHES "g77")
  # g77
  set (CMAKE_Fortran_FLAGS_RELEASE "-funroll-all-loops -fno-f2c -O3 -m32 -module=${MODINCLUDE}")
  set (CMAKE_Fortran_FLAGS_DEBUG   "-fno-f2c -O0 -g -m32 -module=${MODINCLUDE}")
else (Fortran_COMPILER_NAME MATCHES "gfortran.*")
  message ("CMAKE_Fortran_COMPILER full path: " ${CMAKE_Fortran_COMPILER})
  message ("Fortran compiler: " ${Fortran_COMPILER_NAME})
  message ("No optimized Fortran compiler flags are known, we just try -O2...")
  set (CMAKE_Fortran_FLAGS_RELEASE "-O2 -module=${MODINCLUDE}")
  set (CMAKE_Fortran_FLAGS_DEBUG   "-O0 -g -module=${MODINCLUDE}")
endif (Fortran_COMPILER_NAME MATCHES "gfortran.*")


set(SRCDATADIR "${LIBINTMASTERDIR}/lib/basis")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -std=c++11 -I/usr/local/include/eigen3 -O3  -DHAVE_CONFIG_H  -I${SRCDIR} -I${LIBINTMASTERDIR}/src/bin -I${LIBINTMASTERDIR}/include -I${LIBINTBUILDDIR}/include -I${LIBINTBUILDDIR}/src/bin -fPIC -std=c++11 -I/usr/local/include/eigen3 -I${LIBINTBUILDDIR}/include -I${LIBINTBUILDDIR}/include/libint2 -I${LIBINTBUILDDIR}/src/lib/libint -DSRCDATADIR=\\\"/home/carlos/Python-Projects/DFT-CODES-PYTHON/libint-2.2-spher-shared-intel-derivs/libint-master/tests/hartree-fock/../../lib/basis\\\" ")

#set(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} ${MKLROOT}/lib/intel64/libmkl_blas95_lp64.a ${MKLROOT}/lib/intel64/libmkl_lapack95_lp64.a -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_lp64.a ${MKLROOT}/lib/intel64/libmkl_intel_thread.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -liomp5 -lpthread -lm -ldl")


#set(FORTLIB "-L$(HFDIR)/../lib -lMatrixMultiplyMod")

set(FORTLIB "-L${CMAKE_LIBRARY_OUTPUT_DIRECTORY} -lMatrixMultiplyMod")
set(FORTSTATICLIB "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/libMatrixMultiplyMod.a")

#set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${MKLROOT}/lib/intel64/libmkl_blas95_lp64.a ${MKLROOT}/lib/intel64/libmkl_lapack95_lp64.a -L${MKLROOT}/lib/intel64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread -lm -ldl")
# THE FLAG BELOW WORKS WITHOUT MATRIXMULTIPLY.
set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${LIBINTBUILDDIR}/src/bin/libint/libINT.a ${LIBINTBUILDDIR}/lib/libint2.so ${NEGFYLIBDIR}/libAnt.so -L${NEGFYLIBDIR} -lAnt -lm -lmpfr -lgmpxx -lgmp   -lpthread")
#set(CMAKE_SHARED_LINKER_FLAGS "${LIBINTBUILDDIR}/src/bin/libint/libINT.a ${LIBINTBUILDDIR}/lib/libint2.so -lm -lmpfr -lgmpxx -lgmp   -lpthread")


file(GLOB HartreeFockSOURCES "HartreeFockClass.cpp")


# build executables
#set (NMPROGRAMS "HartreeFock.f90")
#set (EXECUTABLES "HartreeFock.exe" ${NMPROGRAMS})
#set (SCRIPTS "gen_pert.sh" "pert_multi_mode.sh")

#add_executable ("HartreeFock.exe" "HartreeFock.f90")
#foreach (p ${NMPROGRAMS})
#  add_executable (${p} "${p}.f90")
#endforeach (p)
#add_library(HartreeFock ${A_srcs})
#add_library(HartreeFock ${HartreeFockSOURCES})
#add_library(HartreeFock OBJECT ${HartreeFockSOURCES})

#add_library(HartreeFock STATIC ${HartreeFockSOURCES})
add_library(HartreeFockSt STATIC ${HartreeFockSOURCES})
add_library(HartreeFock SHARED ${HartreeFockSOURCES})
#target_link_libraries(HartreeFock MatrixMultiplyMod)

# install executables and scripts
#install (TARGETS ${EXECUTABLES} 
#         RUNTIME DESTINATION "bin")
#install (PROGRAMS ${SCRIPTS}
#         DESTINATION "bin") 
