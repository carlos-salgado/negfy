TOPDIR=/home/carlos/Python-Projects/DFT-CODES-PYTHON/libint-2.2-spher-intel-derivs/libint-build
ifndef SRCDIR
  SRCDIR=$(shell pwd)
endif
-include $(TOPDIR)/src/bin/MakeVars
-include $(TOPDIR)/src/lib/libint/MakeVars.features

# include headers the object include directory
#CPPFLAGS += -I$(TOPDIR)/include -I$(TOPDIR)/include/libint2 -I$(SRCDIR)/$(TOPDIR)/src/lib/libint -std=c++11 -I/usr/local/include/eigen3 -g  -fPIC -std=c++11 -I/usr/local/include/eigen3 -DSRCDATADIR=\"$(SRCDIR)/$(TOPDIR)/lib/basis\"
#CPPFLAGS += -I$(TOPDIR)/include -I$(TOPDIR)/include/libint2 -I$(SRCDIR)/$(TOPDIR)/src/lib/libint -std=c++11 -I/usr/local/include/eigen3 -g  -fPIC -std=c++11 -I/usr/local/include/eigen3 -I/home/carlos/anaconda3/include -I/home/carlos/anaconda3/include/python3.6m -I/home/carlos/anaconda3/envs/idp/include -DSRCDATADIR=\"$(SRCDIR)/$(TOPDIR)/lib/basis\"

CPPFLAGS += -I$(TOPDIR)/include -I$(TOPDIR)/include/libint2 -I$(SRCDIR)/$(TOPDIR)/src/lib/libint -std=c++11 -I/usr/local/include/eigen3 -g  -fPIC -std=c++11 -shared -I/usr/local/include/eigen3 -I/home/carlos/anaconda3/envs/idp/include -I/usr/local/boost_1_63_0_intel_idp -I/home/carlos/anaconda3/envs/idp/include/python3.5m # WORKS WITH PYTHON3-INTEL-IDP BOOST-PYTHON BUT WHITHOUT BOOST-NUMPY FOR EXECUTABLE HARTREEFOCK BUT NOT SHARED LIBRARY.


#LDFLAGS += -L/usr/local/lib -lEigen3
#LDFLAGS += -L/home/carlos/anaconda3/envs/idp/lib/libboost_python.so -lboost_python

LDFLAGS += -fPIC -L/home/carlos/anaconda3/envs/idp/lib -lboost_system  -L/home/carlos/anaconda3/envs/idp/lib -lboost_python3 -lboost_python -L/home/carlos/anaconda3/lib -lpython3.6m # WORKS WITH PYTHON3-INTEL-IDP BOOST-PYTHON BUT WHITHOUT BOOST-NUMPY FOR EXECUTABLE HARTREEFOCK BUT NOT SHARED LIBRARY.


COMPILER_LIB = $(TOPDIR)/src/bin/libint/libINT.a
COMPUTE_LIB = -lint2
vpath %.a $(TOPDIR)/lib:$(TOPDIR)/lib/.libs

OBJSUF = o
DEPSUF = d
CXXDEPENDSUF = none
CXXDEPENDFLAGS = -M


TEST1 = hartreefock
CXXTEST1SRC = $(TEST1).cc
CXXTEST1OBJ = $(CXXTEST1SRC:%.cc=%.$(OBJSUF))
CXXTEST1DEP = $(CXXTEST1SRC:%.cc=%.$(DEPSUF))

TEST2 = HartreeFockClass
CXXTEST2SRC = $(TEST2).cc
CXXTEST2OBJ = $(CXXTEST2SRC:%.cc=%.$(OBJSUF))
CXXTEST2DEP = $(CXXTEST2SRC:%.cc=%.$(DEPSUF))

check:: check1 check2

check1::
check2::

ifeq ($(CXXGEN_SUPPORTS_CPP11),yes)
	@echo "CXXGEN_SUPPORTS_CPP11 "$(CXXGEN_SUPPORTS_CPP11)
 ifeq ($(LIBINT_SUPPORTS_ONEBODY),yes)
		@echo "LIBINT_SUPPORTS_ONEBODY "$(LIBINT_SUPPORTS_ONEBODY)
  ifeq ($(LIBINT_SUPPORTS_ERI),yes)
		@echo "LIBINT_SUPPORTS_ERI "$(LIBINT_SUPPORTS_ERI)
#   ifeq ($(LIBINT_HAS_EIGEN),yes)
		@echo "LIBINT_HAS_EIGEN "$(LIBINT_HAS_EIGEN)
    ifeq ($(LIBINT_CONTRACTED_INTS),yes)
		@echo "LIBINT_CONTRACTED_INTS "$(LIBINT_CONTRACTED_INTS)
     ifeq ($(LIBINT_SHELL_SET),1)
check1:: $(TEST1)
	./$(TEST1) $(SRCDIR)/h2o.xyz | $(PYTHON) $(SRCDIR)/$^-validate.py
#	./$(TEST1) $(SRCDIR)/h2o.xyz | $(PYTHON) $(SRCDIR)/$^.py

check2:: $(TEST2)
	./$(TEST2) $(SRCDIR)/h2o_rotated.xyz | $(PYTHON) $(SRCDIR)/$^-validate.py ../../src/lib/libint/MakeVars.features
     endif
    endif
#   endif
  endif
 endif
endif

$(TEST1): $(CXXTEST1OBJ) $(COMPILER_LIB) $(COMPUTE_LIB)
	$(LD) -o $@ $(LDFLAGS) $^ $(SYSLIBS)

$(TEST2): $(CXXTEST2OBJ) $(COMPILER_LIB) $(COMPUTE_LIB)
	$(LD) -o $@ $(LDFLAGS) $^ $(SYSLIBS) -lpthread

# Source files for timer and tester are to be compiled using CXXGEN
$(TEST1) $(TEST2): CXX=$(CXXGEN)
$(TEST1) $(TEST2): CXXFLAGS=$(CXXGENFLAGS)
$(TEST1) $(TEST2): LD=$(CXXGEN)

clean::
	-rm -rf $(TEST1) $(TEST2) *.o *.d

distclean:: realclean
	-rm -rf $(TOPDIR)/include/libint2/boost

realclean:: clean

targetclean:: clean

$(TOPDIR)/include/libint2/boost/preprocessor.hpp: $(SRCDIR)/$(TOPDIR)/external/boost.tar.gz
	gunzip -c $(SRCDIR)/$(TOPDIR)/external/boost.tar.gz | tar -xf - -C $(TOPDIR)/include/libint2

depend:: $(CXXTEST1DEP) $(CXXTEST2DEP)

ifneq ($(CXXDEPENDSUF),none)
%.d:: %.cc $(TOPDIR)/include/libint2/boost/preprocessor.hpp
	$(CXXDEPEND) $(CXXDEPENDFLAGS) -c $(CPPFLAGS) $(CXXFLAGS) $< > /dev/null
	sed 's/^$*.o/$*.$(OBJSUF) $*.d/g' < $(*F).$(CXXDEPENDSUF) > $(@F)
	/bin/rm -f $(*F).$(CXXDEPENDSUF)
else
%.d:: %.cc $(TOPDIR)/include/libint2/boost/preprocessor.hpp
	$(CXXDEPEND) $(CXXDEPENDFLAGS) -c $(CPPFLAGS) $(CXXFLAGS) $< | sed 's/^$*.o/$*.$(OBJSUF) $*.d/g' > $(@F)
endif

-include $(CXXTEST1DEP)
-include $(CXXTEST2DEP)
