#*********************************************************
#*                                                        *
#*      ANT.G09-2.4.1 - Makefile                          *
#*                                                        *
#**********************************************************
#*                                                        *
#*  Copyright (c) by                                      *
#*                                                        *
#*  David Jacob (1)                                       *
#*  Juan Jose Palacios (2)                                *
#*                                                        *
#* (1) Theory Department                                  *
#*     Max-Planck-Institute for Microstructure Physics    *
#*     Halle, 06120 (GERMANY)                             *
#* (2) Departamento de Fisica de la Materia Condensada    *
#*     Universidad Autonoma de Madrid                     *      
#*     28049 Madrid (SPAIN)                               *
#**********************************************************

# set complier/linker and options
#MAKE=make
F90=ifort
CC=icc
AR=ar
BIN=../bin

# MKL related libs
MKLROOT= /opt/intel/composer_xe_2015.0.090/mkl
MKLPATH= ${MKLROOT}/lib/intel64
MKLINCLUDE=${MKLROOT}/include

#INTELLIBS= -Wl,--start-group ${MKLPATH}/libmkl_intel_ilp64.a ${MKLPATH}/libmkl_core.a ${MKLPATH}/libmkl_intel_thread.a -Wl,--end-group
INTELLIBS= -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_ilp64.a ${MKLROOT}/lib/intel64/libmkl_sequential.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group

#include make.in
# Preprocessor flags. Must be the same value as in Gaussian
#PREPROC= -DDEFMAXSHL=250000 -DDEFMAXATM=250000 -DDEFMAXTIT=100 -DDEFMAXRTE=4000
DDEFMAXSHL=250000
DDEFMAXATM=250000
DDEFMAXTIT=100
DDEFMAXRTE=4000

# Compilation flags.
#CFLAGS= -i8 -r8 -mcmodel=medium -parallel -axAVX -fPIC -shared-intel -static-libgcc -no-prec-div -fpp3 -ftz -pad -mkl -m64 -mp=nonuma -O2 -unroll # ORIGINAL ANT
CFLAGS= -DBUILD_F90_MODULE -O3 -i8 -r8 -fpe3 -heap-arrays -mcmodel=medium -parallel -axAVX -fPIC -shared-intel -static-libgcc -no-prec-div -fpp3 -ftz -pad -mkl -m64 -mp=nonuma -unroll
#FFLAGS+="-DBUILD_F90_MODULE -O3 -i8 -r8 -fpe3 -heap-arrays"
#CFLAGS =  -i8 -r8 -I${MKLROOT}/include/intel64/ilp64 -I${MKLROOT}/include
# Linking flags
#LFLAGS= -lpthread -lm -lc
#LDFLAGS+=   ${MKLROOT}/lib/intel64/libmkl_blas95_ilp64.a ${MKLROOT}/lib/intel64/libmkl_lapack95_ilp64.a -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_ilp64.a ${MKLROOT}/lib/intel64/libmkl_sequential.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread -lm -ldl
LDFLAGS+=  ${MKLROOT}/lib/intel64/libmkl_blas95_ilp64.a ${MKLROOT}/lib/intel64/libmkl_lapack95_ilp64.a -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_ilp64.a ${MKLROOT}/lib/intel64/libmkl_sequential.a ${MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread -lm -lc -ldl -openmp -lpthread

# use these sources: 
SRCS= preproc.F util.f90 parameters.f90 antcommon.f90 g09Common.f90 constants.f90 numeric.f90 cluster.f90 ortho.f90 correlation.f90 OneDLead.f90 BetheLattice.f90 device.f90 ANT.f90

#SRCS= preproc.F util.f90 parameters.f90 antcommon.f90 g09Common.f90 constants.f90 lapack_blas.f numeric.f90 cluster.f90 ortho.f90 correlation.f90 OneDLead.f90 BetheLattice.f90 device.f90 ANT.f90

# use name of parent directory as library name
PARDIRNAME=$(shell dirname `pwd`)
#LIBNAME=$(shell basename $(PARDIRNAME))
LIBNAME=libAntG

# objects
OBJS= $(SRCS:%.c=../obj/%.o) $(SRCS:%.f=../obj/%.o) $(SRCS:%.F=../obj/%.o) $(SRCS:%.f90=../obj/%.o) 

# ANT.G library to be generated
ANTLIB=../lib/$(LIBNAME).a
#L502=$(BIN)/l502.exe 

# rule for object generation
../obj/%.o: %.c 
	$(CC) -c -o $@ $<
../obj/%.o: %.F
	$(F90) $(CFLAGS) -I$(MKLINCLUDE) $(PREPROC) -c -o $@ $<
../obj/%.o: %.f 
	$(F90) $(CFLAGS) -I$(MKLINCLUDE) -c -o $@ $<
../obj/%.o: %.f90 
	$(F90) $(CFLAGS) -I$(MKLINCLUDE) -c -o $@ $<

# targets: libraries and l502.exe
#target: $(ANTLIB) $(L502)
target: $(ANTLIB)

# rule for the library
$(ANTLIB): $(OBJS)
	echo $(OBJS)
	- rm  $(ANTLIB)
	$(AR) crv $(ANTLIB) $(OBJS)

# rule for l502.exe
#$(L502): $(OBJS)
#	$(F90) $(CFLAGS) -o $(L502) $(BIN)/ml502.o $(BIN)/l502.a $(BIN)/bdam1.o $(BIN)/caldsu.o -L$(MKLPATH) $(GAUSSLIBS) $(ANTLIB) $(INTELLIBS) $(LFLAGS) 

libAntG.so: $(OBJS)
#	$(FC) -o libAntG.so $(OBJS) -L$(MKLPATH) $(INTELLIBS) $(LDFLAGS) $(ANTLIB) -shared
	$(FC) -o libAntG.so $(ANTLIB) -L$(MKLPATH) $(INTELLIBS) $(LDFLAGS) $(ANTLIB) -shared

AntG.exe: $(OBJS)
#	$(FC) -o AntG.exe $(OBJS) -L$(MKLPATH) $(INTELLIBS) $(LDFLAGS) $(ANTLIB) -shared
	$(FC) $(CFLAGS) -c AntG.f90
#	$(FC) -o AntG.exe AntG.o -L../lib -lAntG -L$(MKLPATH) $(INTELLIBS) $(LDFLAGS) -fPIC -openmp -lpthread
	$(FC) -o AntG.exe AntG.o $(ANTLIB) -L$(MKLPATH) $(INTELLIBS) $(LDFLAGS) -fPIC -openmp -lpthread -static

#	chmod o-rwx $(L502)

# Cleaning up to compile from scratch afterwards
clean:
	@echo "Cleaning up..."
	-rm ./*.mod
#	-rm ./*.ff90
	-rm $(BIN)/l502.exe
	-rm ../obj/*.o
	-rm ../lib/*.a
